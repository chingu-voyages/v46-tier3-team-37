generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String        @id @default(cuid())
  email            String?       @unique
  emailVerified    DateTime?
  username         String        @unique @db.VarChar(255)
  password         String        @db.VarChar(255)
  image            String?
  accounts         Account[]
  sessions         Session[]
  items            Item[]        @relation("OwnerItems")
  messagesSent     Message[]     @relation("SentMessages")
  messagesReceived Message[]     @relation("ReceivedMessages")
  Review           Review[]      @relation("ReviewsGiven")
  Transaction      Transaction[] @relation("RentTransactions")
}

model Item {
  id          String        @id @default(cuid())
  name        String
  description String
  price       Float
  location    Location      @relation(fields: [locationId], references: [id])
  locationId  String
  owner       User          @relation("OwnerItems", fields: [ownerId], references: [id])
  ownerId     String
  reviews     Review[]
  images      Image[]
  categories  Category[]
  Transaction Transaction[]
}

model Review {
  id         String @id @default(cuid())
  rating     Int
  text       String
  reviewer   User   @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewerId String
  item       Item   @relation(fields: [itemId], references: [id])
  itemId     String
}

model Transaction {
  id        String   @id @default(cuid())
  status    Status
  renter    User     @relation("RentTransactions", fields: [renterId], references: [id])
  renterId  String
  item      Item     @relation(fields: [itemId], references: [id])
  startDate DateTime
  endDate   DateTime
  itemId    String
  fee       Float
}

enum Status {
  OPEN
  ACTIVE
  COMPLETED
  HOLD
}

model Message {
  id         String   @id @default(cuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  content    String
  timestamp  DateTime
}

model Category {
  id    String @id @default(cuid())
  name  String
  items Item[]
}

model Location {
  id        String @id @default(cuid())
  name      String
  latitude  Float?
  longitude Float?
  items     Item[]
}

model Image {
  id     String @id @default(cuid())
  url    String
  item   Item   @relation(fields: [itemId], references: [id])
  itemId String
}
